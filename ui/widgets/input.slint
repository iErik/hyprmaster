//import { LineEdit } from "std-widgets.slint";

export component TextIn inherits Rectangle {
  background: rgba(46, 49, 50, 0.4);
  height: 45px;
  preferred-height: 45px;
  border-radius: 8px;
  //clip: true;

  HorizontalLayout {
    padding-right: 10px;
    padding-left: 10px;

    Rectangle {
      background: red;
      max-width: root.width;

      TextInput {
        height: root.height;
        max-width: root.width;
        vertical-alignment: TextVerticalAlignment.center;
        //color: rgba(163, 171, 182, 0.9);
        color: green;
      }
     }
  }
}

export component LineEditBase inherits Rectangle {
  clip: true;

  in property <string> placeholder-text;
  in-out property <brush> placeholder-color;

  in property <length> font-size <=> text-input.font-size;
  in-out property <string> text <=> text-input.text;
  in property <int> font-weight <=> text-input.font-weight;
  in property <brush> text-color;

  in property <bool> enabled <=> text-input.enabled;
  out property <bool> has-focus: text-input.has-focus;
  in property <bool> read-only <=> text-input.read-only;
  in property <length> margin;

  in property <InputType> input-type
    <=> text-input.input-type;

  in property <TextHorizontalAlignment> horizontal-alignment
    <=> text-input.horizontal-alignment;

  in property <color> selection-background-color
    <=> text-input.selection-background-color;
  in property <color> selection-foreground-color
    <=> text-input.selection-foreground-color;


  placeholder := Text {
    width: 100%;
    height: 100%;
    vertical-alignment: center;
    text: (root.text == "" && text-input.preedit-text == "")
      ? root.placeholder-text
      : "";

    font-size: text-input.font-size;
    font-italic: text-input.font-italic;
    font-weight: text-input.font-weight;
    font-family: text-input.font-family;

    color: root.placeholder-color;
    horizontal-alignment: root.horizontal-alignment;
    // the label is set on the LineEdit itself
    accessible-role: none;
  }

  text-input := TextInput {
    property <length> computed-x;
    x: min(0px, max(
      parent.width -
      self.width -
      self.text-cursor-width,
      self.computed-x));

    width: max(
      parent.width -
      self.text-cursor-width,
      self.preferred-width);

    selection-background-color: rgba(0, 0, 0, 0.0);
    selection-foreground-color: rgba(0, 0, 0, 0.0);
    height: 100%;
    vertical-alignment: center;
    single-line: true;
    color: root.text-color;

    cursor-position-changed(cursor-position) => {
      if cursor-position.x + self.computed_x < root.margin
      {
        self.computed_x =
        - cursor-position.x
        + root.margin;
      } else if cursor-position.x + self.computed_x
        > parent.width - root.margin
        - self.text-cursor-width
      {
        self.computed_x =
          parent.width - cursor-position.x
          - root.margin - self.text-cursor-width;
      }
    }
  }
}

export component LineEdit inherits Rectangle {
  height: 45px;
  preferred-height: 45px;

  background: rgba(46, 49, 50, 0.4);
  border-radius: 8px;

  in property <string> placeholder-text
    <=> input.placeholder-text;
  in-out property <brush> placeholder-color
    <=> input.placeholder-color;

  in property <length> font-size <=> input.font-size;
  in-out property <string> text <=> input.text;
  in property <int> font-weight <=> input.font-weight;
  in property <brush> text-color <=> input.text-color;

  in property <bool> enabled <=> input.enabled;
  out property <bool> has-focus: input.has-focus;
  in property <bool> read-only <=> input.read-only;
  in property <length> margin <=> input.margin;

  in property <InputType> input-type
    <=> input.input-type;

  in property <TextHorizontalAlignment> horizontal-alignment
    <=> input.horizontal-alignment;

  in property <color> selection-background-color
    <=> input.selection-background-color;
  in property <color> selection-foreground-color
    <=> input.selection-foreground-color;

  HorizontalLayout {
    padding-right: 12px;
    padding-left: 12px;

    input := LineEditBase { }
  }
}

